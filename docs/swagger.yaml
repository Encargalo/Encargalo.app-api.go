definitions:
  dto.Address:
    properties:
      address:
        example: 'Calle 123 # 45-67'
        type: string
      alias:
        example: Casa principal
        type: string
      coords:
        $ref: '#/definitions/dto.Coords'
      id:
        type: string
      reference:
        example: Frente al parque de los niños
        type: string
    required:
    - address
    - alias
    - coords
    - reference
    type: object
  dto.Coords:
    properties:
      lat:
        example: 4.60971
        type: number
      long:
        example: -74.08175
        type: number
    required:
    - lat
    - long
    type: object
  dto.CustomerResponse:
    properties:
      birthday_date:
        example: "1990-05-20"
        type: string
      email:
        example: carlos.ramirez@example.com
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      name:
        example: Carlos
        type: string
      phone:
        example: "+573001112233"
        type: string
      sur_name:
        example: Ramírez
        type: string
    type: object
  dto.RegisterCustomer:
    properties:
      birthday_date:
        example: "1990-05-20"
        type: string
      email:
        example: carlos.ramirez@example.com
        type: string
      name:
        example: Carlos
        minLength: 3
        type: string
      password:
        example: claveSegura123
        minLength: 8
        type: string
      phone:
        example: "+573001112233"
        type: string
      sur_name:
        example: Ramírez
        minLength: 3
        type: string
    required:
    - birthday_date
    - name
    - password
    - phone
    - sur_name
    type: object
  dto.UpdateCustomer:
    properties:
      email:
        example: carlos.ramirez@example.com
        type: string
      name:
        example: Carlos
        minLength: 3
        type: string
      phone:
        example: "+573001112233"
        type: string
      sur_name:
        example: Ramírez
        minLength: 3
        type: string
    required:
    - name
    - phone
    - sur_name
    type: object
  dto.UpdatePassword:
    properties:
      password:
        example: claveSegura123
        minLength: 8
        type: string
    required:
    - password
    type: object
  dtos.Address:
    properties:
      address:
        example: 'Calle 123 # 45-67'
        type: string
      latitude:
        example: 37.7749
        type: number
      longitude:
        example: -74.08175
        type: number
    required:
    - address
    - latitude
    - longitude
    type: object
  dtos.CreateAdditionsOrders:
    properties:
      addition_id:
        type: string
    type: object
  dtos.CreateItemsOrder:
    properties:
      additions:
        items:
          $ref: '#/definitions/dtos.CreateAdditionsOrders'
        type: array
      amount:
        type: integer
      item_id:
        type: string
      observation:
        type: string
    required:
    - amount
    - item_id
    type: object
  dtos.CreateOrder:
    properties:
      address:
        $ref: '#/definitions/dtos.Address'
      id:
        example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        type: string
      items:
        items:
          $ref: '#/definitions/dtos.CreateItemsOrder'
        type: array
      method_payment:
        enum:
        - Nequi
        - Efectivo
        example: Nequi
        type: string
      shop_id:
        example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        type: string
    required:
    - address
    - id
    - items
    - method_payment
    - shop_id
    type: object
  dtos.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: invalid request
        type: string
    type: object
  dtos.ItemResponse:
    properties:
      category_id:
        example: b01e3f7a-ff6e-45c0-842b-7f89ab48f9e2
        type: string
      description:
        example: Pizza mediana con jamón, piña y queso mozzarella sobre una base de
          salsa napolitana.
        type: string
      has_flavors:
        example: true
        type: boolean
      id:
        example: 7e441237-a818-42d2-bb54-9b8747198305
        type: string
      image:
        example: https://cdn.encargalo.app/items/pizza-hawaiana-mediana.jpg
        type: string
      name:
        example: Pizza Hawaiana Mediana
        type: string
      price:
        example: 32000
        type: integer
      rules:
        items:
          $ref: '#/definitions/dtos.ItemRule'
        type: array
      score:
        example: 4.7
        type: number
      shop_id:
        example: d33aaf08-2c43-41c4-b2e7-882b019edb1e
        type: string
    type: object
  dtos.ItemRule:
    properties:
      id:
        example: 71c62783-820d-46f8-957d-c8d02db97264
        type: string
      item_id:
        example: 7e441237-a818-42d2-bb54-9b8747198305
        type: string
      rule_key:
        example: max_flavors
        type: string
      rule_value:
        example: 2
        type: integer
      selector_type:
        example: multi_select
        type: string
    type: object
  dtos.ShopResponse:
    properties:
      address:
        type: string
      banner:
        type: string
      home_phone:
        type: string
      id:
        type: string
      logo:
        type: string
      name:
        type: string
      opened:
        type: boolean
      score:
        type: number
      tag:
        type: string
      type:
        type: string
    type: object
info:
  contact: {}
paths:
  /best-sellers:
    get:
      consumes:
      - application/json
      description: Esta función maneja la solicitud para obtener los productos mas
        vendidos por tienda de una tienda específica.
      parameters:
      - description: ID de la tienda
        format: uuid
        in: query
        name: shop_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.ItemResponse'
            type: array
        "400":
          description: shop_id es requerido o inválido
          schema:
            type: string
        "404":
          description: Productos más vendidos no encontrados
          schema:
            type: string
        "500":
          description: Error interno del servidor
          schema:
            type: string
      summary: Obtener los productos mas vendidos por tienda
      tags:
      - Products
  /customers:
    get:
      description: Retorna los datos del cliente identificado por el customer_id contenido
        en el token
      produces:
      - application/json
      responses:
        "200":
          description: Datos del cliente
          schema:
            $ref: '#/definitions/dto.CustomerResponse'
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: unexpected error
          schema:
            type: string
      summary: Obtiene la información del cliente autenticado
      tags:
      - Customers
    post:
      consumes:
      - application/json
      description: Registrar un nuevo cliente en el sistema con los datos proporcionados.
        Valida campos obligatorios como nombre, teléfono y contraseña.
      parameters:
      - description: Datos del cliente
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterCustomer'
      responses:
        "201":
          description: customer successfully registered
          schema:
            type: string
        "400":
          description: Se retorna cuando hay un campo que no cumple con los requisitos
            o directamente el body se envía vacío.
          schema:
            type: string
        "500":
          description: Se retorna cuando ocurre un error inexperado en el servidor.
          schema:
            type: string
      summary: Registrar un nuevo cliente
      tags:
      - Customers
    put:
      consumes:
      - application/json
      description: Actualiza los datos del cliente usando la información enviada en
        el cuerpo de la solicitud
      parameters:
      - description: Datos del cliente a actualizar
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCustomer'
      produces:
      - application/json
      responses:
        "200":
          description: customer updated success
          schema:
            type: string
        "400":
          description: error de validación o formato inválido
          schema:
            type: string
        "409":
          description: customer not found
          schema:
            type: string
        "500":
          description: unexpected error
          schema:
            type: string
      security:
      - SessionCookie: []
      summary: Actualiza la información del cliente autenticado
      tags:
      - Customers
  /customers/address:
    get:
      description: Retorna un arreglo con todas las direcciones asociadas al cliente
        identificado en el token
      produces:
      - application/json
      responses:
        "200":
          description: Lista de direcciones
          schema:
            items:
              $ref: '#/definitions/dto.Address'
            type: array
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: unexpected error
          schema:
            type: string
      summary: Obtiene todas las direcciones del cliente autenticado
      tags:
      - Customers Address
    post:
      consumes:
      - application/json
      description: Registra una dirección asociada al customer_id obtenido del contexto
      parameters:
      - description: Datos de la dirección
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/dto.Address'
      produces:
      - application/json
      responses:
        "201":
          description: address registred
          schema:
            type: string
        "400":
          description: error de validación o parseo
          schema:
            type: string
        "500":
          description: unexpected error
          schema:
            type: string
      summary: Registra una nueva dirección para el cliente autenticado
      tags:
      - Customers Address
  /customers/address/{address}:
    delete:
      description: Elimina la dirección especificada por su ID, siempre que pertenezca
        al cliente autenticado
      parameters:
      - description: ID de la dirección (UUID)
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: address deleted success
          schema:
            type: string
        "500":
          description: unexpected error
          schema:
            type: string
      security:
      - SessionCookie: []
      summary: Elimina una dirección del cliente autenticado
      tags:
      - Customers Address
  /customers/change-password:
    put:
      consumes:
      - application/json
      description: Permite al cliente autenticado actualizar su contraseña, validando
        el formato y los requisitos establecidos
      parameters:
      - description: Datos para actualizar la contraseña
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePassword'
      produces:
      - application/json
      responses:
        "200":
          description: password updated success
          schema:
            type: string
        "400":
          description: error de validación o formato inválido
          schema:
            type: string
        "409":
          description: customer not found
          schema:
            type: string
        "500":
          description: unexpected error
          schema:
            type: string
      security:
      - SessionCookie: []
      summary: Actualiza la contraseña del cliente autenticado
      tags:
      - Customers
  /orders:
    post:
      consumes:
      - application/json
      description: Creates a new order with the provided details
      parameters:
      - description: Order payload
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateOrder'
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            type: string
        "400":
          description: Invalid request body or validation failed
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Create a new order
      tags:
      - Orders
  /shops:
    get:
      parameters:
      - description: Este es el ID del negocio, viene en formato UUID
        in: query
        name: id
        type: string
      - description: Este es el tag del negocio .ej:dmo
        in: query
        name: tag
        type: string
      - description: 'Latitud del usuario .ej: 4.678034'
        in: query
        name: lat
        required: true
        type: number
      - description: 'Longitud del usuario .ej: -74.0496399'
        in: query
        name: lon
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.ShopResponse'
            type: array
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: End Point para obtener un negocio con todos sus products, se debe enviar
        alguno de los 2 query params requeridos.
      tags:
      - Shops
  /shops/all:
    get:
      parameters:
      - description: 'Latitud del usuario .ej: 4.678034'
        in: query
        name: lat
        required: true
        type: number
      - description: 'Longitud del usuario .ej: -74.0496399'
        in: query
        name: lon
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.ShopResponse'
            type: array
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Para que no me fastidies de cual es la ruta
      tags:
      - Shops
swagger: "2.0"
